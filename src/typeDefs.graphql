type Pagination {
    items: Int!
    page: Int!
    pages: Int!
    per_page: Int!
}

type Artist {
    name: String
}

type Label {
    name: String
}

type Company {
    name: String
    entity_type_name: String
}

type SeriesEntry {
    name: String
    entity_type_name: String
}

type ArtistMember {
    id: ID!
    name: String!
    active: Boolean
    thumbnail_url: String
}

type ArtistPage {
    namevariations: [String]
    profile: String
    images: [Image]
    name: String!
    members: [ArtistMember]
}

scalar StringOrInt

type Format {
    qty: String
    text: String
    name: String
    descriptions: [String]
}

type BasicInformation {
    id: ID!
    title: String
    thumb: String
    artists: [Artist]
    year: StringOrInt
    country: String
    formats: [Format]
    format: [String]
    label: [String]
    released: String
    genres: [String]
    styles: [String]
    user_data: UserData
    type: String
}

type ArtistSearch {
    id: ID!
    type: String!
    user_data: UserData!
    title: String!
    thumb: String
    cover_image: String
}

type InstanceNotes {
    field_id: Int
    value: String
}

type Releases {
    id: ID!
    date_added: String
    rating: Float
    basic_information: BasicInformation!
}

type CollectionInstance {
    id: ID!
    date_added: String
    instance_id: ID!
    folder_id: ID
    rating: Float
    notes: [InstanceNotes]
    basic_information: BasicInformation!
}

type Collection {
    pagination: Pagination!
    releases: [CollectionInstance]!
}

type ReleasesSearchResult {
    isReleases: Boolean
    pagination: Pagination!
    results: [Releases]!
}

type ArtistSearchResult {
    isArtists: Boolean
    pagination: Pagination!
    results: [ArtistSearch]!
}

type MasterSearchResult {
    isMasters: Boolean
    pagination: Pagination!
    results: [Releases]!
}

union SearchResults = ArtistSearchResult | ReleasesSearchResult | MasterSearchResult

type UserData {
    in_collection: Boolean
    in_wantlist: Boolean
}

type TrackList {
    position: String!
    title: String!
    duration: String!
}

type Identifier {
    type: String!
    value: String!
    description: String
}

type IsInCollectionResponse {
    isInCollection: Boolean!
    pagination: Pagination!
    releases: [Releases]!
}

type DiscogsRating {
    count: Int!
    average: Float!
}

type DiscogsCommunity {
    have: Int!
    want: Int!
    rating: DiscogsRating!
}

type Release {
    uri: String!
    id: ID!
    master_id: ID!
    title: String!
    thumb: String!
    artists_sort: String
    artists: [Artist]!
    formats: [Format]!
    year: StringOrInt
    vinylRatingsRelease: VRRelease
    images: [Image]
    genres: [String]!
    styles: [String]
    tracklist: [TrackList]!
    identifiers: [Identifier]!
    released: String
    notes: String
    country: String
    community: DiscogsCommunity
    labels: [Label]!
    series: [SeriesEntry]!
    companies: [Company]!
}

type MasterRelease {
    id: ID!
    title: String!
    artists: [Artist]!
    year: StringOrInt
    images: [Image]
    genres: [String]!
    styles: [String]
    tracklist: [TrackList]!
    released: String
    num_for_sale: Int
    lowest_price: Float
    main_release: Int
    most_recent_release: Int
}

type DiscogsStats {
    user: UserData!
    community: UserData!
}

type DiscogsVersions {
    id: ID!
    stats: DiscogsStats
    thumb: String
    format: String
    country: String
    title: String
    label: String
    released: String
}

type DiscogsMasterVersions {
    pagination: Pagination
    versions: [Releases]
}

type WantListReleases {
    rating: Int
    id: Int
    basic_information: BasicInformation!
}

type Image {
    resource_url: String!
    height: Int
    width: Int
}

type Wants {
    pagination: Pagination!
    wants: [WantListReleases]
}

input Ratings {
    quietness: Float!
    flatness: Float!
    clarity: Float!
}

type VRRating {
    _id: ID!
    quietness: Float!
    flatness: Float!
    clarity: Float!
    rating: Float
    createdAt: String
    notes: String
    release: String
    updatedAt: String
    user: User
}

type UserCopy {
    releaseId: Int
    washedOn: String
    username: String
}

type VRRelease {
    releaseId: Int!
    title: String!
    artist: String!
    quietnessAvg: Float!
    flatnessAvg: Float!
    clarityAvg: Float!
    ratingAvg: Float!
    ratingsCount: Int!
    userCopy: UserCopy
    currentUserRating: VRRating
    vinylRatings: [VRRating]
}

type User {
    _id: ID
    username: String!
    token: String!
    avatarUrl: String!
    discogsUserId: Int!
    releasesRated: Int!
    vinylRatings: [VRRating]
}

type Folder {
    id: Int!
    name: String!
    count: Int!
}

type UserCopy {
    releaseId: Int
    washedOn: String
}

type AddToCollectionResponse {
    instance_id: String!
}

type RemoveFromCollectionResponse {
    isGood: Boolean
}

type Query {
    getFolders: [Folder]!
    getCollection(
        folder: Int
        page: Int
        per_page: Int
        sort: String
        sort_order: String
        offset: Int
        limit: Int
    ): Collection!
    getWantList(
        page: Int
        per_page: Int
        sort: String
        sort_order: String
        offset: Int
        limit: Int
    ): Wants!
    getRelease(id: Int!): Release!
    getMasterRelease(id: Int!): MasterRelease!
    getMasterReleaseVersions(
        master_id: ID
        page: Int
        per_page: Int
        sort: String
        sort_order: String
        released: String
        country: String
    ): DiscogsMasterVersions!
    getReleaseInCollection(id: Int!): IsInCollectionResponse!
    getSearch(
        search: String
        type: String
        sort: String
        sort_order: String
        page: Int
        per_page: Int
        offset: Int
        limit: Int
    ): SearchResults
    getUser(auth: String!): User!
    getArtist(id: Int!): ArtistPage!
}

type Mutation {
    addRelease(releaseId: Int!, title: String!, artist: String!): VRRelease!
    addToCollection(releaseId: Int!, folderId: Int!): AddToCollectionResponse
    removeFromCollection(
        folderId: Int!
        releaseId: Int!
        instanceId: Int!
    ): RemoveFromCollectionResponse
    addRating(
        releaseId: Int!
        quietness: Int!
        clarity: Int!
        flatness: Int!
        notes: String
    ): VRRating
    addWashedOn(releaseId: Int!, washedOn: String!, title: String!, artist: String!): UserCopy
}
